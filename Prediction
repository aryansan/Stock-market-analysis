def prepare_stock_prediction_data(stock_data, news_data):
    """
    Prepare both stock and news data for the StockPredictor class
    """
    # Process news data
    news_processor = NewsPreprocessor(news_data)
    daily_sentiment = news_processor.process_news_data()
    
    # Ensure stock data index is datetime
    stock_data.index = pd.to_datetime(stock_data.index)
    
    # Align the sentiment data with stock data dates
    aligned_sentiment = pd.Series(index=stock_data.index, dtype=float)
    aligned_sentiment.loc[daily_sentiment.index] = daily_sentiment
    
    # Forward fill any missing values and fill remaining NaNs with 0
    aligned_sentiment = aligned_sentiment.fillna(method='ffill').fillna(0)
    
    return stock_data, aligned_sentiment
class StockPredictor:
    def __init__(self, stock_data, news_data, sequence_length=60):
        self.stock_data = stock_data
        self.news_data = news_data
        self.sequence_length = sequence_length
        self.scaler = MinMaxScaler()
        self.model = None
        self.feature_columns = None  # Initialize feature_columns

        
    def add_technical_indicators(self, df):
        # Moving Averages
        sma_20 = SMAIndicator(close=df['Close'], window=20)
        sma_50 = SMAIndicator(close=df['Close'], window=50)
        ema_20 = EMAIndicator(close=df['Close'], window=20)
        
        # MACD
        macd = MACD(close=df['Close'])
        
        # RSI
        rsi = RSIIndicator(close=df['Close'])
        
        # Bollinger Bands
        bb = BollingerBands(close=df['Close'])
        
        df['SMA_20'] = sma_20.sma_indicator()
        df['SMA_50'] = sma_50.sma_indicator()
        df['EMA_20'] = ema_20.ema_indicator()
        df['MACD'] = macd.macd()
        df['MACD_Signal'] = macd.macd_signal()
        df['RSI'] = rsi.rsi()
        df['BB_Upper'] = bb.bollinger_hband()
        df['BB_Lower'] = bb.bollinger_lband()
        
        # Calculate price changes
        df['Price_Change'] = df['Close'].pct_change()
        df['Price_Change_5d'] = df['Close'].pct_change(periods=5)
        
        # Drop NaN rows caused by indicator calculations
        df = df.dropna()
        return df

    def prepare_data(self, start_date='2000-01-01', sentiment_start_date='2017-01-01'):
        # Add technical indicators
        df = self.add_technical_indicators(self.stock_data.copy())

        # Prepare features
        self.feature_columns = ['Close', 'Volume', 'SMA_20', 'SMA_50', 'EMA_20', 
                                'MACD', 'MACD_Signal', 'RSI', 'BB_Upper', 'BB_Lower',
                                'Price_Change', 'Price_Change_5d']

        # Add sentiment score column with 0 (neutral) as default
        df['Sentiment_Score'] = 0

        # Update sentiment scores from news_data where available
        sentiment_index = df.index >= pd.Timestamp(sentiment_start_date)
        df.loc[sentiment_index, 'Sentiment_Score'] = self.news_data

        # Add sentiment to features
        self.feature_columns.append('Sentiment_Score')

        # Update self.stock_data to include all processed features
        self.stock_data = df  # Keep all the columns in stock_data for future use

        # Scale features
        features = df[self.feature_columns]
        scaled_features = self.scaler.fit_transform(features)

        # Create sequences
        X, y = [], []
        for i in range(self.sequence_length, len(scaled_features)):
            X.append(scaled_features[i-self.sequence_length:i])
            y.append(scaled_features[i, 0])  # 0 index is Close price

        return np.array(X), np.array(y), df.index[self.sequence_length:]

    def build_model(self, input_shape):
        model = Sequential([
            LSTM(100, return_sequences=True, input_shape=input_shape),
            Dropout(0.2),
            LSTM(50, return_sequences=False),
            Dropout(0.2),
            Dense(25),
            Dense(1)
        ])
        
        model.compile(optimizer='adam', loss='mse')
        return model
    
    def predict_future(self, future_periods=30):
        """
        Predict future stock prices using the trained model.
        
        Parameters:
        future_periods (int): Number of days to predict into the future (e.g., 120 for ~4 months).
        
        Returns:
        pd.DataFrame: DataFrame containing future predictions with dates.
        """
        # Get the last sequence from the training data
        last_sequence = self.stock_data[-self.sequence_length:][self.feature_columns]
        last_sequence_scaled = self.scaler.transform(last_sequence)
        
        # Prepare container for predictions
        future_predictions = []
        future_dates = pd.date_range(
            start=self.stock_data.index[-1] + pd.Timedelta(days=1),
            periods=future_periods,
            freq='B'  # Business days only
        )

        # Iteratively predict the future
        current_sequence = last_sequence_scaled[-self.sequence_length:].reshape(1, self.sequence_length, -1)
        for _ in range(future_periods):
            next_prediction = self.model.predict(current_sequence)
            next_close_price = self.scaler.inverse_transform([[next_prediction[0, 0]] + [0] * (len(self.feature_columns) - 1)])[0, 0]
            future_predictions.append(next_close_price)
            
            # Update current sequence with new prediction
            next_sequence = current_sequence[0][1:].tolist() + [[next_prediction[0, 0]] + [0] * (len(self.feature_columns) - 1)]
            current_sequence = np.array(next_sequence).reshape(1, self.sequence_length, -1)

        # Combine future dates and predictions
        future_df = pd.DataFrame({'Date': future_dates, 'Predicted_Close': future_predictions})
        return future_df

    def train_model(self, stock_symbol=None):
        print(f"Training model for stock symbol: {stock_symbol}")
        # Prepare data
        X, y, dates = self.prepare_data()

        # Split data into train and validation sets
        train_size = int(len(X) * 0.8)
        X_train, X_val = X[:train_size], X[train_size:]
        y_train, y_val = y[:train_size], y[train_size:]

        # Build and train model
        self.model = self.build_model((X.shape[1], X.shape[2]))  # Save model as an instance attribute
        history = self.model.fit(X_train, y_train, 
                                 validation_data=(X_val, y_val),
                                 epochs=100, 
                                 batch_size=32,
                                 verbose=1)

        # Make predictions
        predictions = self.model.predict(X)

        # Inverse transform predictions and actual values
        pred_shape = predictions.shape[0]
        predictions_full = np.zeros((pred_shape, self.scaler.n_features_in_))
        predictions_full[:, 0] = predictions[:, 0]
        actual_full = np.zeros((pred_shape, self.scaler.n_features_in_))
        actual_full[:, 0] = y

        predictions = self.scaler.inverse_transform(predictions_full)[:, 0]
        actual = self.scaler.inverse_transform(actual_full)[:, 0]

        # Evaluate performance
        mse = mean_squared_error(actual, predictions)
        rmse = np.sqrt(mse)
        r2 = r2_score(actual, predictions)
        mae = mean_absolute_error(actual, predictions)
        mape = np.mean(np.abs((actual - predictions) / actual)) * 100

        print(f"Evaluation Metrics for {stock_symbol}:")
        print(f"Mean Squared Error (MSE): {mse:.4f}")
        print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")
        print(f"R-squared (RÂ²): {r2:.4f}")
        print(f"Mean Absolute Error (MAE): {mae:.4f}")
        print(f"Mean Absolute Percentage Error (MAPE): {mape:.4f}%")

        return predictions, actual, dates, history

    def plot_results(self, predictions, actual, dates, history):
        # Plot predictions vs actual
        plt.figure(figsize=(15, 8))
        plt.plot(dates, actual, label='Actual', color='blue', alpha=0.6)
        plt.plot(dates, predictions, label='Predicted', color='red', alpha=0.6)
        
        # Add vertical line at 2017 to show when sentiment analysis starts
        sentiment_start = pd.Timestamp('2017-01-01')
        plt.axvline(x=sentiment_start, color='green', linestyle='--', alpha=0.5)
        plt.text(sentiment_start, plt.ylim()[1], 'Sentiment Analysis Start', 
                 rotation=90, verticalalignment='top')
        
        plt.title('Stock Price Prediction\n(Sentiment Analysis added from 2017)')
        plt.xlabel('Date')
        plt.ylabel('Price')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # Plot training history
        plt.figure(figsize=(15, 6))
        plt.plot(history.history['loss'], label='Training Loss')
        plt.plot(history.history['val_loss'], label='Validation Loss')
        plt.title('Model Loss During Training')
        plt.xlabel('Epoch')
        plt.ylabel('Loss')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
def main():
    # Load your data
    stock_df = pd.read_csv('HCLTECH.csv', index_col='Date', parse_dates=True)
    news_df = pd.read_csv('News_sentiment_Jan2017_to_Apr2021.csv')

    # Make sure news_df has the correct column names
    news_df.columns = ['Date', 'Title', 'URL', 'sentiment', 'confidence']

    # Prepare the data
    stock_data, processed_sentiment = prepare_stock_prediction_data(stock_df, news_df)

    # Create and train the model
    predictor = StockPredictor(stock_data, processed_sentiment)
    predictions, actual, dates, history = predictor.train_model('HCLTECH')  # Replace with your stock symbol

    # Plot results
    predictor.plot_results(predictions, actual, dates, history)

    # Predict future prices
    future_df = predictor.predict_future(future_periods=30)
    print("Future Predictions for 1 Months:")
    print(future_df)

    # Plot future predictions
    plt.figure(figsize=(15, 8))
    plt.plot(future_df['Date'], future_df['Predicted_Close'], label='Future Predictions', color='orange')
    plt.title('Future Stock Price Predictions (1 Months)')
    plt.xlabel('Date')
    plt.ylabel('Predicted Close Price')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.show()
  if __name__ == "__main__":
    main()
